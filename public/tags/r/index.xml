<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Coded bioacoustics</title>
    <link>marce10.github.io/coded_bioacustics/tags/r/</link>
    <description>Recent content in R on Coded bioacoustics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 May 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="marce10.github.io/coded_bioacustics/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dynaSpec: dynamic spectrograms in R</title>
      <link>marce10.github.io/coded_bioacustics/post/2020-05-28-dynaspec_dynamic_spectrograms_in_r/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2020-05-28-dynaspec_dynamic_spectrograms_in_r/</guid>
      <description>The R package dynaSpec can now be installed from github. This is a set of tools to generate dynamic spectrogram visualizations in video format. It is still on the making and new visualizations will be available soon. FFMPEG must be installed in order for this package to work.&#xA;To install dynaSpec from github you will need the R package devtools:&#xA;# From github devtools::install_github(&amp;#34;maRce10/dynaSpec&amp;#34;) #load package library(dynaSpec) Installation of external dependencies can be tricky on operating systems other than Linux.</description>
    </item>
    <item>
      <title>Editing wave objects from extended selection tables</title>
      <link>marce10.github.io/coded_bioacustics/post/2020-05-26-editing_wave_objects_from_extended_selection_tables/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2020-05-26-editing_wave_objects_from_extended_selection_tables/</guid>
      <description>&amp;ldquo;Is there a simple way to remove noise from the clips in an extended table &amp;ndash; I can do this by directly manipulating the attributes of the table but it seems a bit kludgy &amp;hellip; so again, am I missing something simple?&amp;rdquo;&#xA;Manipulating clips from extended selection tables can be pretty straightforward. It can be done by using lapply() to go over each clip. Things should be fine as long as you don&amp;rsquo;t mess with any time related feature (i.</description>
    </item>
    <item>
      <title>Automatic signal detection: a case study</title>
      <link>marce10.github.io/coded_bioacustics/post/2020-06-15-automatic_signal_detection_a_case_study/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2020-06-15-automatic_signal_detection_a_case_study/</guid>
      <description>⚠️ March-2024: Note that the R package ohun for optimizing sound event detection is now available which provides an improved version of the methods shown in this post Some recent additions to warbleR aim to simplify the automatic detection of signals. The current post details these additions with a study case detecting inquiry calls of Spix&amp;rsquo;s disc-winged bats (Thyroptera tricolor).&#xA;Inquiry calls were recorded while the bats were flying in a flight cage.</description>
    </item>
    <item>
      <title>Signal detection with cross-correlation using warbleR</title>
      <link>marce10.github.io/coded_bioacustics/post/2020-04-10-signal_detection_warbler_vs_monitor/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2020-04-10-signal_detection_warbler_vs_monitor/</guid>
      <description>⚠️ Note that the R package ohun , which optimizes sound event detection, is now accessible. It offers an enhanced version of the methods demonstrated in this post warbleR (v1.1.24) now includes functions to detect signals using cross-correlation similar to those in the package monitoR. There is already a blog post on cross-correlation detection using monitoR. In this post I show how to do that with warbleR and compare its performance against that from monitoR.</description>
    </item>
    <item>
      <title>Compare signals from selection tables to a set of templates using cross-correlation</title>
      <link>marce10.github.io/coded_bioacustics/post/2019-01-12-selection_table_vs_template_xcorr/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2019-01-12-selection_table_vs_template_xcorr/</guid>
      <description>I got the following question about cross-correlation:&#xA;&amp;ldquo;We would like to compare every call within a selection table to a template of each owl, and get peak correlation coefficients on each call separately&amp;rdquo;&#xA;One way to do this would be putting the unidentified and template signals together into a single selection table, and then running cross-correlation. However, this will also compare all unidentified signals against each other, which can be very inefficient.</description>
    </item>
    <item>
      <title>Spectrograms on trees</title>
      <link>marce10.github.io/coded_bioacustics/post/2019-01-12-phylo_spectro_function/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2019-01-12-phylo_spectro_function/</guid>
      <description>This post describes the new warbleR function phylo_spectro. The function adds spectrograms of sounds annotated in a selection table (&amp;lsquo;X argument) onto the tips of a tree (of class &amp;lsquo;phylo&amp;rsquo;). The &amp;rsquo;tip.label&amp;rsquo; column in &amp;lsquo;X&amp;rsquo; is used to match spectrograms and tree tips. The function uses internally the plot.phylo function from the ape package to plot the tree and warbleR&amp;rsquo;s specreator function to create the spectrograms. Arguments for both of these functions can be provided for further customization.</description>
    </item>
    <item>
      <title>Extended selection tables</title>
      <link>marce10.github.io/coded_bioacustics/post/2018-05-15-extended_selection_tables/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2018-05-15-extended_selection_tables/</guid>
      <description>⚠️ March-2024: Note that the new vignette &#39;Annotation data format&#39; from the package warbleR provides a updated and more detailed overview of the annotation format used by warbleR, including extended selection tables This post shows how to create and use the new warbleR object class extended_selection_table.&#xA;These objects are created with the selec_table() function. The function takes data frames containing selection data (sound file name, selection, start, end &amp;hellip;), checks whether the information is consistent (see checksels() function for details) and saves the &amp;lsquo;diagnostic&amp;rsquo; metadata as an attribute.</description>
    </item>
    <item>
      <title>Simulating animal vocalizations</title>
      <link>marce10.github.io/coded_bioacustics/post/2018-02-22-simulating_animal_vocalizations/</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2018-02-22-simulating_animal_vocalizations/</guid>
      <description>⚠️ Dec-2023: Be aware that the functions `sim_songs()` has undergone substantial changes beginning with warbleR 1.1.30 which simulations may not those shown in this post. This post shows how to simulate animal vocalizations using the new warbleR function sim_songs. The function allows users to create song with several sub-units and harmonics, which are return as a wave object in the R environment. This can have several applications, from simulating song evolution to testing the efficacy of methods to measure acoustic structure for different signal types.</description>
    </item>
    <item>
      <title>Acoustic space scatter plot</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-04-23-acoustic_space_scatter_plot/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-04-23-acoustic_space_scatter_plot/</guid>
      <description>Some people have asked for the code we used to make figure 3 in the Methods in Ecology and Evolution paper describing warbleR. So, here it is. The figure was made in part by my collaborator Grace Smith-Vidaurre, so thanks to Grace for sharing.&#xA;The figure shows the grouping of long-billed hermit songs in the acoustic space based on similarity of dominant frequency contours. Similarity was assessed using dynamic time warping.</description>
    </item>
    <item>
      <title>Choosing the right method for measuring acoustic signal structure</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-02-17-choosing-the-right-method-for-measuring-acoustic-signal-structure/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-02-17-choosing-the-right-method-for-measuring-acoustic-signal-structure/</guid>
      <description>Bioacoustic research relies on quantifying the structure of acoustic` signals and comparing that structure across behavioral/ecological contexts, groups or species. However, measuring signal structure in a way that fully accounts for the variation in the signals could be a tricky task. Some of the differences that are apparent by visual inspection of spectrograms might not be picked up by some analyses. Hence, choosing the most appropriate analytical approach is a critical step.</description>
    </item>
    <item>
      <title>Signal detection with cross-correlation using monitoR </title>
      <link>marce10.github.io/coded_bioacustics/post/2016-12-15-detecting_signals_with_monitor/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2016-12-15-detecting_signals_with_monitor/</guid>
      <description>⚠️ March-2024: Note that the R package ohun , which optimizes sound event detection, is now accessible. It offers an enhanced version of the methods demonstrated in this post Here I show how to detect signals with cross-correlation using the very cool package monitoR. This package aims to facilitate acoustic template detection. The code here is similar but much less detailed than the quick start vignette of the monitoR package, so I encourage to look at the vignette if you want to learn more about it.</description>
    </item>
    <item>
      <title>Download a single recording for each species in a country from Xeno-Canto</title>
      <link>marce10.github.io/coded_bioacustics/post/2016-12-22-download_a_single_recording_for_each_species_in_a_site_from_xeno-canto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2016-12-22-download_a_single_recording_for_each_species_in_a_site_from_xeno-canto/</guid>
      <description>A warbleR user asks if &amp;ldquo;there is any method for downloading from xeno canto a SINGLE individual of each species in Costa Rica&amp;rdquo;.&#xA;This can be done by 1) downloading the metadata of all recordings in a given site (in this case Costa Rica) using the querxc function from the package warbleR (which searches and downloads recordings from Xeno-Canto), 2) filtering the metadata to have only one recording per species, and 3) input the filtered metadata back into querxcto download the selected recordings.</description>
    </item>
    <item>
      <title>Individual sound files for each selection</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-06-06-individual_sound_files_for_each_selection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-06-06-individual_sound_files_for_each_selection/</guid>
      <description>A friend of mine wants to &amp;ldquo;create individual sound files for each selection&amp;rdquo; in a selection table. This is a good opportunity to show how to create a function that works iteratively on signals in a selection table (like most warbleR functions).&#xA;It takes 3 main steps:&#xA;Create a (internal) function that does what we want on a single selection (i.e. a single row of the selection table)&#xA;Add and (X)lapply loop to run the function from step 1 iteratively on each row</description>
    </item>
    <item>
      <title>Pdf files with spectrograms of full recordings</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-01-07-create_pdf_files_with_spectrograms_of_full_recordings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-01-07-create_pdf_files_with_spectrograms_of_full_recordings/</guid>
      <description>The warbleR function lspec produces image files with spectrograms of whole recordings split into multiple rows. For a long recording several image files will be produced, which could be inconvenient when dealing with many long recordings. I recently added a new function lspec2pdf that combines lspec images in .jpeg format into a single pdf file (available in warbleR 1.1.5 or higher).&#xA;You need warbleR version 1.1.5 or higher to be able to run the code (currently you have to download it from github using the package devtools).</description>
    </item>
  </channel>
</rss>
