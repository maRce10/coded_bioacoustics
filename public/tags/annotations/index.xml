<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>annotations on Coded bioacoustics</title>
    <link>marce10.github.io/coded_bioacustics/tags/annotations/</link>
    <description>Recent content in annotations on Coded bioacoustics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 May 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="marce10.github.io/coded_bioacustics/tags/annotations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Editing wave objects from extended selection tables</title>
      <link>marce10.github.io/coded_bioacustics/post/2020-05-26-editing_wave_objects_from_extended_selection_tables/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2020-05-26-editing_wave_objects_from_extended_selection_tables/</guid>
      <description>&amp;ldquo;Is there a simple way to remove noise from the clips in an extended table &amp;ndash; I can do this by directly manipulating the attributes of the table but it seems a bit kludgy &amp;hellip; so again, am I missing something simple?&amp;rdquo;&#xA;Manipulating clips from extended selection tables can be pretty straightforward. It can be done by using lapply() to go over each clip. Things should be fine as long as you don&amp;rsquo;t mess with any time related feature (i.</description>
    </item>
    <item>
      <title>Extended selection tables</title>
      <link>marce10.github.io/coded_bioacustics/post/2018-05-15-extended_selection_tables/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2018-05-15-extended_selection_tables/</guid>
      <description>This post shows how to create and use the new warbleR object class extended_selection_table.&#xA;These objects are created with the selec_table() function. The function takes data frames containing selection data (sound file name, selection, start, end &amp;hellip;), checks whether the information is consistent (see checksels() function for details) and saves the &amp;lsquo;diagnostic&amp;rsquo; metadata as an attribute. When the argument extended = TRUE the function generates an object of class extended_selection_table which also contains a list of wave objects corresponding to each of the selections in the data frame.</description>
    </item>
    <item>
      <title>Individual sound files for each selection</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-06-06-individual_sound_files_for_each_selection/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-06-06-individual_sound_files_for_each_selection/</guid>
      <description>A friend of mine wants to &amp;ldquo;create individual sound files for each selection&amp;rdquo; in a selection table. This is a good opportunity to show how to create a function that works iteratively on signals in a selection table (like most warbleR functions).&#xA;It takes 3 main steps:&#xA;Create a (internal) function that does what we want on a single selection (i.e. a single row of the selection table)&#xA;Add and (X)lapply loop to run the function from step 1 iteratively on each row</description>
    </item>
    <item>
      <title>Fixing selections manually</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-08-03-fixing_selections_manually/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-08-03-fixing_selections_manually/</guid>
      <description>This short post shows how to use the seltailor function to adjust selection frequency and time &amp;lsquo;coordinates&amp;rsquo; in an interactive and iterative manner.&#xA;To be able to run the code you need warbleR 1.1.9 or higher, which hasn&amp;rsquo;t been released on CRAN and it&amp;rsquo;s only available on github. It can be installed using the devtools package as follows&#xA;# install devtools and monitor if are not yet installed # install devtools if is not yet installed if(!</description>
    </item>
    <item>
      <title>Frequency range detection from spectrum</title>
      <link>marce10.github.io/coded_bioacustics/post/2018-06-29-frequency_range_detection_from_spectrum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2018-06-29-frequency_range_detection_from_spectrum/</guid>
      <description>We are often interested in getting the frequency range of acoustic signals, either because we have specific predictions about its variation or simply because we want to measure other stuff within that range. Measuring frequency range is typically done by drawing boxes in Raven/Avisoft/Syrinx. An alternative way, and potentially less subjective, is to infer the range from the energy distribution in the frequency domain applying amplitude thresholds on spectrums. I have added two new functions to warbleR that do exactly that:</description>
    </item>
    <item>
      <title>Rraven: Connecting R and Raven Sound Analysis Software</title>
      <link>marce10.github.io/coded_bioacustics/post/2017-11-30-rraven_connecting_r_and_raven_sound_analysis_software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2017-11-30-rraven_connecting_r_and_raven_sound_analysis_software/</guid>
      <description>The Rraven package is designed to facilitate the exchange of data between R and Raven sound analysis software (Cornell Lab of Ornithology). Raven provides very powerful tools for the analysis of (animal) sounds. R can simplify the automatization of complex routines of analyses. Furthermore, R packages as warbleR, seewave and monitoR (among others) provide additional methods of analysis, working as a perfect complement for those found in Raven. Hence, bridging these applications can largely expand the bioacoustician&amp;rsquo;s toolkit.</description>
    </item>
  </channel>
</rss>
