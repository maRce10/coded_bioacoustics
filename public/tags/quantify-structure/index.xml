<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quantify structure on Coded bioacoustics</title>
    <link>marce10.github.io/coded_bioacustics/tags/quantify-structure/</link>
    <description>Recent content in quantify structure on Coded bioacoustics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="marce10.github.io/coded_bioacustics/tags/quantify-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Potential issues of the &#39;spectral parameters/PCA&#39; approach</title>
      <link>marce10.github.io/coded_bioacustics/post/2018-07-04-issues_spectral_parameters-pca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2018-07-04-issues_spectral_parameters-pca/</guid>
      <description>Somehow measuring a bunch of spectral/temporal parameters and then reducing its dimensionality using principal component analysis has become the standard procedure when looking at variation in signal structure (i.e. measuring acoustic space), particularly in behavioral ecology and comparative bioacoustics. In most cases the approach is used without any kind of ground-truthing that can help validate the analysis. Given the complexity of animal acoustic signals, the approach could miss key signal features.</description>
    </item>
    <item>
      <title>Song similarity using dynamic time warping</title>
      <link>marce10.github.io/coded_bioacustics/post/2016-09-12-similarity_of_acoustic_signals_with_dynamic_time_warping_dtw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>marce10.github.io/coded_bioacustics/post/2016-09-12-similarity_of_acoustic_signals_with_dynamic_time_warping_dtw/</guid>
      <description>Here I show how to use the dfDTW function in warbleR to compare acoustics signals using dynamic time warping (DTW).&#xA;First load these packages (if not installed the code will install it):&#xA;x&amp;lt;-c(&amp;#34;vegan&amp;#34;, &amp;#34;warbleR&amp;#34;) A &amp;lt;- lapply(x, function(y) { if(!y %in% installed.packages()[,&amp;#34;Package&amp;#34;]) install.packages(y) require(y, character.only = T) }) and load example data from warbleR&#xA;# optional, save it in a temporal folder # setwd(tempdir()) data(list = c( &amp;#34;Phae.long1&amp;#34;, &amp;#34;Phae.long2&amp;#34;,&amp;#34;Phae.long3&amp;#34;, &amp;#34;Phae.long4&amp;#34;,&amp;#34;selec.table&amp;#34;)) writeWave(Phae.</description>
    </item>
  </channel>
</rss>
